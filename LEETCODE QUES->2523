Closest Prime no. in range

Given two positive integers left and right, find the two integers num1 and num2 such that:
left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs
satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist,
return [-1, -1].

Example 1:
Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.

CODE:
import math

class Solution:
    def closestPrimes(self, left, right):

        def sieve(n):
            """Returns a list where sieve[i] is True if i is prime"""
            is_prime = [True] * (n + 1)
            is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime

            for i in range(2, int(math.sqrt(n)) + 1):
                if is_prime[i]:  # If i is prime, mark its multiples as non-prime
                    for j in range(i * i, n + 1, i):
                        is_prime[j] = False
            return is_prime
        
        # Step 1: Compute primes up to 'right' using Sieve of Eratosthenes
        is_prime = sieve(right)

        # Step 2: Extract primes in range [left, right]
        primes = [num for num in range(left, right + 1) if is_prime[num]]

        # Step 3: If fewer than 2 primes, return [-1, -1]
        if len(primes) < 2:
            return [-1, -1]

        # Step 4: Find the closest pair
        min_gap = float('inf')
        ans = [-1, -1]
        
        for i in range(len(primes) - 1):
            gap = primes[i+1] - primes[i]
            if gap < min_gap:
                min_gap = gap
                ans = [primes[i], primes[i+1]]

        return ans
