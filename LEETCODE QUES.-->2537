COUNT THE NO> OF GOOD SUBARRAYS

Given an integer array nums and an integer k, return the number of good subarrays of nums.
A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.

 CODE:
class Solution(object):
    def countGood(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        mpp = {}
        cnt = left = 0
        for i in range(len(nums)):
            if nums[i] not in mpp:
                mpp[nums[i]] = 0
            k -= mpp[nums[i]]
            mpp[nums[i]] += 1
            while k <= 0:
                mpp[nums[left]] -= 1
                k += mpp[nums[left]]
                left += 1
            cnt += left
        return cnt
