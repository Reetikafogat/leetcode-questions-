Minimum operations to make a univalue grid 

You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.
A uni-value grid is a grid where all the elements of it are equal.
Return the minimum number of operations to make the grid uni-value. If it is not possible, return -1.
eg1:Input: grid = [[2,4],[6,8]], x = 2
Output: 4
Explanation: We can make every element equal to 4 by doing the following: 
- Add x to 2 once.
- Subtract x from 6 once.
- Subtract x from 8 twice.
A total of 4 operations were used.

CODE:
class Solution(object):
    def minOperations(self, grid, x):
        """
        :type grid: List[List[int]]
        :type x: int
        :rtype: int
        """
        a=[]
        for i in grid:
            for j in i:
                a.append(j)
        a.sort()
        # mid=len(a)//2
        median=a[len(a)//2]
        summ=0
        for i in a:
            if abs(i-median)%x!=0:
                return -1
            summ+=abs(i-median)//x
        return summ
        
